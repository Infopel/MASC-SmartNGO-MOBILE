// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<FormControlRadio> render 1`] = `
<View
  dataSet={Object {}}
  isInvalid={false}
  style={
    Object {
      "width": "100%",
    }
  }
>
  <View
    dataSet={Object {}}
    feedbackId="field-2-feedback"
    hasFeedbackText={true}
    hasHelpText={false}
    helpTextId="field-2-helptext"
    isDisabled={false}
    isInvalid={false}
    isReadOnly={false}
    isRequired={false}
    labelId="field-2-label"
    nativeID="field-2-label"
    setHasFeedbackText={[Function]}
    setHasHelpText={[Function]}
    style={
      Object {
        "flexDirection": "row",
        "justifyContent": "flex-start",
        "marginBottom": 4,
        "marginTop": 4,
      }
    }
  >
    <Text
      dataSet={Object {}}
      style={
        Object {
          "backgroundColor": undefined,
          "color": "#737373",
          "fontFamily": undefined,
          "fontSize": 14,
          "fontStyle": "normal",
          "fontWeight": "500",
          "letterSpacing": 0,
          "lineHeight": 21,
          "textDecorationLine": undefined,
        }
      }
    >
      Delete civic incubator item
    </Text>
  </View>
  <View
    accessibilityLabel="Delete civic incubator item"
    accessibilityRole="radiogroup"
    accessibilityState={
      Object {
        "disabled": false,
      }
    }
    dataSet={Object {}}
    name="select"
    onChange={[Function]}
    style={
      Object {
        "alignItems": "flex-start",
      }
    }
  >
    <View
      accessibilityRole="radio"
      accessibilityState={
        Object {
          "checked": false,
          "disabled": false,
        }
      }
      accessible={true}
      checked={false}
      collapsable={false}
      dataSet={Object {}}
      feedbackId="field-1-feedback"
      focusable={true}
      formControlContext={
        Object {
          "feedbackId": "field-1-feedback",
          "hasFeedbackText": false,
          "hasHelpText": false,
          "helpTextId": "field-1-helptext",
          "isDisabled": false,
          "isInvalid": false,
          "isReadOnly": false,
          "isRequired": false,
          "labelId": "field-1-label",
          "nativeID": "field-1",
          "setHasFeedbackText": [Function],
          "setHasHelpText": [Function],
        }
      }
      hasFeedbackText={false}
      hasHelpText={false}
      helpTextId="field-1-helptext"
      isInvalid={false}
      isReadOnly={false}
      isRequired={false}
      labelId="field-1-label"
      nativeID="field-1"
      onBlur={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      setHasFeedbackText={[Function]}
      setHasHelpText={[Function]}
      state={
        Object {
          "lastFocusedValue": null,
          "name": "select",
          "selectedValue": undefined,
          "setLastFocusedValue": [Function],
          "setSelectedValue": [Function],
        }
      }
      style={Object {}}
      value="1"
    >
      <View
        dataSet={Object {}}
        style={
          Object {
            "alignItems": "center",
            "flexDirection": "row",
          }
        }
      >
        <View
          dataSet={Object {}}
          style={
            Object {
              "alignItems": "center",
              "display": "flex",
              "justifyContent": "center",
            }
          }
        >
          <View
            dataSet={Object {}}
            style={Object {}}
          />
          <View
            colorScheme="primary"
            dataSet={Object {}}
            defaultIsChecked={false}
            feedbackId="field-2-feedback"
            formControlContext={
              Object {
                "feedbackId": "field-2-feedback",
                "hasFeedbackText": true,
                "hasHelpText": false,
                "helpTextId": "field-2-helptext",
                "isDisabled": false,
                "isInvalid": false,
                "isReadOnly": false,
                "isRequired": false,
                "labelId": "field-2-label",
                "nativeID": "field-2",
                "setHasFeedbackText": [Function],
                "setHasHelpText": [Function],
              }
            }
            hasFeedbackText={true}
            hasHelpText={false}
            helpTextId="field-2-helptext"
            isDisabled={false}
            isInvalid={false}
            isReadOnly={false}
            isRequired={false}
            labelId="field-2-label"
            nativeID="field-2"
            setHasFeedbackText={[Function]}
            setHasHelpText={[Function]}
            state={
              Object {
                "lastFocusedValue": null,
                "name": "select",
                "selectedValue": undefined,
                "setLastFocusedValue": [Function],
                "setSelectedValue": [Function],
              }
            }
            style={
              Object {
                "alignItems": "center",
                "backgroundColor": "#fafafa",
                "borderColor": "#a3a3a3",
                "borderRadius": 9999,
                "borderWidth": 2,
                "display": "flex",
                "justifyContent": "center",
                "paddingBottom": 4,
                "paddingLeft": 4,
                "paddingRight": 4,
                "paddingTop": 4,
              }
            }
            value="1"
          >
            <RNSVGSvgView
              accessibilityRole="image"
              align="xMidYMid"
              bbHeight={12}
              bbWidth={12}
              color={4285756275}
              dataSet={Object {}}
              focusable={false}
              meetOrSlice={0}
              minX={0}
              minY={0}
              stroke=""
              style={
                Array [
                  Object {
                    "backgroundColor": "transparent",
                    "borderWidth": 0,
                  },
                  Object {
                    "color": "#737373",
                    "height": 12,
                    "opacity": 0,
                    "width": 12,
                  },
                  Object {
                    "flex": 0,
                    "height": 12,
                    "width": 12,
                  },
                ]
              }
              tintColor={4285756275}
              vbHeight={24}
              vbWidth={24}
            >
              <RNSVGGroup
                opacity={0}
                propList={
                  Array [
                    "stroke",
                  ]
                }
                stroke={null}
              >
                <RNSVGGroup>
                  <RNSVGPath
                    d="M0 12C-2.34822e-08 13.5759 0.310389 15.1363 0.913445 16.5922C1.5165 18.0481 2.40042 19.371 3.51472 20.4853C4.62902 21.5996 5.95189 22.4835 7.4078 23.0866C8.86371 23.6896 10.4241 24 12 24C13.5759 24 15.1363 23.6896 16.5922 23.0866C18.0481 22.4835 19.371 21.5996 20.4853 20.4853C21.5996 19.371 22.4835 18.0481 23.0866 16.5922C23.6896 15.1363 24 13.5759 24 12C24 10.4241 23.6896 8.86371 23.0866 7.4078C22.4835 5.95189 21.5996 4.62902 20.4853 3.51472C19.371 2.40042 18.0481 1.5165 16.5922 0.913446C15.1363 0.310389 13.5759 0 12 0C10.4241 0 8.86371 0.310389 7.4078 0.913446C5.95189 1.5165 4.62902 2.40042 3.51472 3.51472C2.40042 4.62902 1.5165 5.95189 0.913445 7.4078C0.310389 8.86371 -2.34822e-08 10.4241 0 12Z"
                    fill={
                      Array [
                        2,
                      ]
                    }
                    propList={
                      Array [
                        "fill",
                        "stroke",
                      ]
                    }
                    stroke={null}
                  />
                </RNSVGGroup>
              </RNSVGGroup>
            </RNSVGSvgView>
          </View>
        </View>
        <View
          dataSet={Object {}}
          style={
            Object {
              "width": 8,
            }
          }
        />
        <Text
          dataSet={Object {}}
          style={
            Object {
              "backgroundColor": undefined,
              "color": "#171717",
              "fontFamily": undefined,
              "fontSize": 16,
              "fontStyle": "normal",
              "fontWeight": "400",
              "letterSpacing": 0,
              "lineHeight": 24,
              "textDecorationLine": undefined,
            }
          }
        >
          Yes
        </Text>
      </View>
    </View>
    <View
      dataSet={Object {}}
      style={
        Object {
          "height": 4,
        }
      }
    />
    <View
      accessibilityRole="radio"
      accessibilityState={
        Object {
          "checked": false,
          "disabled": false,
        }
      }
      accessible={true}
      checked={false}
      collapsable={false}
      dataSet={Object {}}
      feedbackId="field-1-feedback"
      focusable={true}
      formControlContext={
        Object {
          "feedbackId": "field-1-feedback",
          "hasFeedbackText": false,
          "hasHelpText": false,
          "helpTextId": "field-1-helptext",
          "isDisabled": false,
          "isInvalid": false,
          "isReadOnly": false,
          "isRequired": false,
          "labelId": "field-1-label",
          "nativeID": "field-1",
          "setHasFeedbackText": [Function],
          "setHasHelpText": [Function],
        }
      }
      hasFeedbackText={false}
      hasHelpText={false}
      helpTextId="field-1-helptext"
      isInvalid={false}
      isReadOnly={false}
      isRequired={false}
      labelId="field-1-label"
      nativeID="field-1"
      onBlur={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      setHasFeedbackText={[Function]}
      setHasHelpText={[Function]}
      state={
        Object {
          "lastFocusedValue": null,
          "name": "select",
          "selectedValue": undefined,
          "setLastFocusedValue": [Function],
          "setSelectedValue": [Function],
        }
      }
      style={Object {}}
      value="2"
    >
      <View
        dataSet={Object {}}
        style={
          Object {
            "alignItems": "center",
            "flexDirection": "row",
          }
        }
      >
        <View
          dataSet={Object {}}
          style={
            Object {
              "alignItems": "center",
              "display": "flex",
              "justifyContent": "center",
            }
          }
        >
          <View
            dataSet={Object {}}
            style={Object {}}
          />
          <View
            colorScheme="primary"
            dataSet={Object {}}
            defaultIsChecked={false}
            feedbackId="field-2-feedback"
            formControlContext={
              Object {
                "feedbackId": "field-2-feedback",
                "hasFeedbackText": true,
                "hasHelpText": false,
                "helpTextId": "field-2-helptext",
                "isDisabled": false,
                "isInvalid": false,
                "isReadOnly": false,
                "isRequired": false,
                "labelId": "field-2-label",
                "nativeID": "field-2",
                "setHasFeedbackText": [Function],
                "setHasHelpText": [Function],
              }
            }
            hasFeedbackText={true}
            hasHelpText={false}
            helpTextId="field-2-helptext"
            isDisabled={false}
            isInvalid={false}
            isReadOnly={false}
            isRequired={false}
            labelId="field-2-label"
            nativeID="field-2"
            setHasFeedbackText={[Function]}
            setHasHelpText={[Function]}
            state={
              Object {
                "lastFocusedValue": null,
                "name": "select",
                "selectedValue": undefined,
                "setLastFocusedValue": [Function],
                "setSelectedValue": [Function],
              }
            }
            style={
              Object {
                "alignItems": "center",
                "backgroundColor": "#fafafa",
                "borderColor": "#a3a3a3",
                "borderRadius": 9999,
                "borderWidth": 2,
                "display": "flex",
                "justifyContent": "center",
                "paddingBottom": 4,
                "paddingLeft": 4,
                "paddingRight": 4,
                "paddingTop": 4,
              }
            }
            value="2"
          >
            <RNSVGSvgView
              accessibilityRole="image"
              align="xMidYMid"
              bbHeight={12}
              bbWidth={12}
              color={4285756275}
              dataSet={Object {}}
              focusable={false}
              meetOrSlice={0}
              minX={0}
              minY={0}
              stroke=""
              style={
                Array [
                  Object {
                    "backgroundColor": "transparent",
                    "borderWidth": 0,
                  },
                  Object {
                    "color": "#737373",
                    "height": 12,
                    "opacity": 0,
                    "width": 12,
                  },
                  Object {
                    "flex": 0,
                    "height": 12,
                    "width": 12,
                  },
                ]
              }
              tintColor={4285756275}
              vbHeight={24}
              vbWidth={24}
            >
              <RNSVGGroup
                opacity={0}
                propList={
                  Array [
                    "stroke",
                  ]
                }
                stroke={null}
              >
                <RNSVGGroup>
                  <RNSVGPath
                    d="M0 12C-2.34822e-08 13.5759 0.310389 15.1363 0.913445 16.5922C1.5165 18.0481 2.40042 19.371 3.51472 20.4853C4.62902 21.5996 5.95189 22.4835 7.4078 23.0866C8.86371 23.6896 10.4241 24 12 24C13.5759 24 15.1363 23.6896 16.5922 23.0866C18.0481 22.4835 19.371 21.5996 20.4853 20.4853C21.5996 19.371 22.4835 18.0481 23.0866 16.5922C23.6896 15.1363 24 13.5759 24 12C24 10.4241 23.6896 8.86371 23.0866 7.4078C22.4835 5.95189 21.5996 4.62902 20.4853 3.51472C19.371 2.40042 18.0481 1.5165 16.5922 0.913446C15.1363 0.310389 13.5759 0 12 0C10.4241 0 8.86371 0.310389 7.4078 0.913446C5.95189 1.5165 4.62902 2.40042 3.51472 3.51472C2.40042 4.62902 1.5165 5.95189 0.913445 7.4078C0.310389 8.86371 -2.34822e-08 10.4241 0 12Z"
                    fill={
                      Array [
                        2,
                      ]
                    }
                    propList={
                      Array [
                        "fill",
                        "stroke",
                      ]
                    }
                    stroke={null}
                  />
                </RNSVGGroup>
              </RNSVGGroup>
            </RNSVGSvgView>
          </View>
        </View>
        <View
          dataSet={Object {}}
          style={
            Object {
              "width": 8,
            }
          }
        />
        <Text
          dataSet={Object {}}
          style={
            Object {
              "backgroundColor": undefined,
              "color": "#171717",
              "fontFamily": undefined,
              "fontSize": 16,
              "fontStyle": "normal",
              "fontWeight": "400",
              "letterSpacing": 0,
              "lineHeight": 24,
              "textDecorationLine": undefined,
            }
          }
        >
          No
        </Text>
      </View>
    </View>
  </View>
</View>
`;

exports[`<FormControlRadio> should all items 1`] = `
<View
  dataSet={Object {}}
  isInvalid={false}
  placeholder="civic-incubator-details.title"
  style={
    Object {
      "width": "100%",
    }
  }
>
  <View
    dataSet={Object {}}
    feedbackId="field-5-feedback"
    hasFeedbackText={true}
    hasHelpText={false}
    helpTextId="field-5-helptext"
    isDisabled={false}
    isInvalid={false}
    isReadOnly={false}
    isRequired={false}
    labelId="field-5-label"
    nativeID="field-5-label"
    setHasFeedbackText={[Function]}
    setHasHelpText={[Function]}
    style={
      Object {
        "flexDirection": "row",
        "justifyContent": "flex-start",
        "marginBottom": 4,
        "marginTop": 4,
      }
    }
  >
    <Text
      dataSet={Object {}}
      style={
        Object {
          "backgroundColor": undefined,
          "color": "#737373",
          "fontFamily": undefined,
          "fontSize": 14,
          "fontStyle": "normal",
          "fontWeight": "500",
          "letterSpacing": 0,
          "lineHeight": 21,
          "textDecorationLine": undefined,
        }
      }
    >
      Delete civic incubator item
    </Text>
  </View>
  <View
    accessibilityLabel="Delete civic incubator item"
    accessibilityRole="radiogroup"
    accessibilityState={
      Object {
        "disabled": false,
      }
    }
    dataSet={Object {}}
    name="select"
    onChange={[Function]}
    style={
      Object {
        "alignItems": "flex-start",
      }
    }
  >
    <View
      accessibilityRole="radio"
      accessibilityState={
        Object {
          "checked": false,
          "disabled": false,
        }
      }
      accessible={true}
      checked={false}
      collapsable={false}
      dataSet={Object {}}
      feedbackId="field-4-feedback"
      focusable={true}
      formControlContext={
        Object {
          "feedbackId": "field-4-feedback",
          "hasFeedbackText": false,
          "hasHelpText": false,
          "helpTextId": "field-4-helptext",
          "isDisabled": false,
          "isInvalid": false,
          "isReadOnly": false,
          "isRequired": false,
          "labelId": "field-4-label",
          "nativeID": "field-4",
          "setHasFeedbackText": [Function],
          "setHasHelpText": [Function],
        }
      }
      hasFeedbackText={false}
      hasHelpText={false}
      helpTextId="field-4-helptext"
      isInvalid={false}
      isReadOnly={false}
      isRequired={false}
      labelId="field-4-label"
      nativeID="field-4"
      onBlur={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      setHasFeedbackText={[Function]}
      setHasHelpText={[Function]}
      state={
        Object {
          "lastFocusedValue": null,
          "name": "select",
          "selectedValue": undefined,
          "setLastFocusedValue": [Function],
          "setSelectedValue": [Function],
        }
      }
      style={Object {}}
      value="1"
    >
      <View
        dataSet={Object {}}
        style={
          Object {
            "alignItems": "center",
            "flexDirection": "row",
          }
        }
      >
        <View
          dataSet={Object {}}
          style={
            Object {
              "alignItems": "center",
              "display": "flex",
              "justifyContent": "center",
            }
          }
        >
          <View
            dataSet={Object {}}
            style={Object {}}
          />
          <View
            colorScheme="primary"
            dataSet={Object {}}
            defaultIsChecked={false}
            feedbackId="field-5-feedback"
            formControlContext={
              Object {
                "feedbackId": "field-5-feedback",
                "hasFeedbackText": true,
                "hasHelpText": false,
                "helpTextId": "field-5-helptext",
                "isDisabled": false,
                "isInvalid": false,
                "isReadOnly": false,
                "isRequired": false,
                "labelId": "field-5-label",
                "nativeID": "field-5",
                "setHasFeedbackText": [Function],
                "setHasHelpText": [Function],
              }
            }
            hasFeedbackText={true}
            hasHelpText={false}
            helpTextId="field-5-helptext"
            isDisabled={false}
            isInvalid={false}
            isReadOnly={false}
            isRequired={false}
            labelId="field-5-label"
            nativeID="field-5"
            setHasFeedbackText={[Function]}
            setHasHelpText={[Function]}
            state={
              Object {
                "lastFocusedValue": null,
                "name": "select",
                "selectedValue": undefined,
                "setLastFocusedValue": [Function],
                "setSelectedValue": [Function],
              }
            }
            style={
              Object {
                "alignItems": "center",
                "backgroundColor": "#fafafa",
                "borderColor": "#a3a3a3",
                "borderRadius": 9999,
                "borderWidth": 2,
                "display": "flex",
                "justifyContent": "center",
                "paddingBottom": 4,
                "paddingLeft": 4,
                "paddingRight": 4,
                "paddingTop": 4,
              }
            }
            value="1"
          >
            <RNSVGSvgView
              accessibilityRole="image"
              align="xMidYMid"
              bbHeight={12}
              bbWidth={12}
              color={4285756275}
              dataSet={Object {}}
              focusable={false}
              meetOrSlice={0}
              minX={0}
              minY={0}
              stroke=""
              style={
                Array [
                  Object {
                    "backgroundColor": "transparent",
                    "borderWidth": 0,
                  },
                  Object {
                    "color": "#737373",
                    "height": 12,
                    "opacity": 0,
                    "width": 12,
                  },
                  Object {
                    "flex": 0,
                    "height": 12,
                    "width": 12,
                  },
                ]
              }
              tintColor={4285756275}
              vbHeight={24}
              vbWidth={24}
            >
              <RNSVGGroup
                opacity={0}
                propList={
                  Array [
                    "stroke",
                  ]
                }
                stroke={null}
              >
                <RNSVGGroup>
                  <RNSVGPath
                    d="M0 12C-2.34822e-08 13.5759 0.310389 15.1363 0.913445 16.5922C1.5165 18.0481 2.40042 19.371 3.51472 20.4853C4.62902 21.5996 5.95189 22.4835 7.4078 23.0866C8.86371 23.6896 10.4241 24 12 24C13.5759 24 15.1363 23.6896 16.5922 23.0866C18.0481 22.4835 19.371 21.5996 20.4853 20.4853C21.5996 19.371 22.4835 18.0481 23.0866 16.5922C23.6896 15.1363 24 13.5759 24 12C24 10.4241 23.6896 8.86371 23.0866 7.4078C22.4835 5.95189 21.5996 4.62902 20.4853 3.51472C19.371 2.40042 18.0481 1.5165 16.5922 0.913446C15.1363 0.310389 13.5759 0 12 0C10.4241 0 8.86371 0.310389 7.4078 0.913446C5.95189 1.5165 4.62902 2.40042 3.51472 3.51472C2.40042 4.62902 1.5165 5.95189 0.913445 7.4078C0.310389 8.86371 -2.34822e-08 10.4241 0 12Z"
                    fill={
                      Array [
                        2,
                      ]
                    }
                    propList={
                      Array [
                        "fill",
                        "stroke",
                      ]
                    }
                    stroke={null}
                  />
                </RNSVGGroup>
              </RNSVGGroup>
            </RNSVGSvgView>
          </View>
        </View>
        <View
          dataSet={Object {}}
          style={
            Object {
              "width": 8,
            }
          }
        />
        <Text
          dataSet={Object {}}
          style={
            Object {
              "backgroundColor": undefined,
              "color": "#171717",
              "fontFamily": undefined,
              "fontSize": 16,
              "fontStyle": "normal",
              "fontWeight": "400",
              "letterSpacing": 0,
              "lineHeight": 24,
              "textDecorationLine": undefined,
            }
          }
        >
          Yes
        </Text>
      </View>
    </View>
    <View
      dataSet={Object {}}
      style={
        Object {
          "height": 4,
        }
      }
    />
    <View
      accessibilityRole="radio"
      accessibilityState={
        Object {
          "checked": false,
          "disabled": false,
        }
      }
      accessible={true}
      checked={false}
      collapsable={false}
      dataSet={Object {}}
      feedbackId="field-4-feedback"
      focusable={true}
      formControlContext={
        Object {
          "feedbackId": "field-4-feedback",
          "hasFeedbackText": false,
          "hasHelpText": false,
          "helpTextId": "field-4-helptext",
          "isDisabled": false,
          "isInvalid": false,
          "isReadOnly": false,
          "isRequired": false,
          "labelId": "field-4-label",
          "nativeID": "field-4",
          "setHasFeedbackText": [Function],
          "setHasHelpText": [Function],
        }
      }
      hasFeedbackText={false}
      hasHelpText={false}
      helpTextId="field-4-helptext"
      isInvalid={false}
      isReadOnly={false}
      isRequired={false}
      labelId="field-4-label"
      nativeID="field-4"
      onBlur={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      setHasFeedbackText={[Function]}
      setHasHelpText={[Function]}
      state={
        Object {
          "lastFocusedValue": null,
          "name": "select",
          "selectedValue": undefined,
          "setLastFocusedValue": [Function],
          "setSelectedValue": [Function],
        }
      }
      style={Object {}}
      value="2"
    >
      <View
        dataSet={Object {}}
        style={
          Object {
            "alignItems": "center",
            "flexDirection": "row",
          }
        }
      >
        <View
          dataSet={Object {}}
          style={
            Object {
              "alignItems": "center",
              "display": "flex",
              "justifyContent": "center",
            }
          }
        >
          <View
            dataSet={Object {}}
            style={Object {}}
          />
          <View
            colorScheme="primary"
            dataSet={Object {}}
            defaultIsChecked={false}
            feedbackId="field-5-feedback"
            formControlContext={
              Object {
                "feedbackId": "field-5-feedback",
                "hasFeedbackText": true,
                "hasHelpText": false,
                "helpTextId": "field-5-helptext",
                "isDisabled": false,
                "isInvalid": false,
                "isReadOnly": false,
                "isRequired": false,
                "labelId": "field-5-label",
                "nativeID": "field-5",
                "setHasFeedbackText": [Function],
                "setHasHelpText": [Function],
              }
            }
            hasFeedbackText={true}
            hasHelpText={false}
            helpTextId="field-5-helptext"
            isDisabled={false}
            isInvalid={false}
            isReadOnly={false}
            isRequired={false}
            labelId="field-5-label"
            nativeID="field-5"
            setHasFeedbackText={[Function]}
            setHasHelpText={[Function]}
            state={
              Object {
                "lastFocusedValue": null,
                "name": "select",
                "selectedValue": undefined,
                "setLastFocusedValue": [Function],
                "setSelectedValue": [Function],
              }
            }
            style={
              Object {
                "alignItems": "center",
                "backgroundColor": "#fafafa",
                "borderColor": "#a3a3a3",
                "borderRadius": 9999,
                "borderWidth": 2,
                "display": "flex",
                "justifyContent": "center",
                "paddingBottom": 4,
                "paddingLeft": 4,
                "paddingRight": 4,
                "paddingTop": 4,
              }
            }
            value="2"
          >
            <RNSVGSvgView
              accessibilityRole="image"
              align="xMidYMid"
              bbHeight={12}
              bbWidth={12}
              color={4285756275}
              dataSet={Object {}}
              focusable={false}
              meetOrSlice={0}
              minX={0}
              minY={0}
              stroke=""
              style={
                Array [
                  Object {
                    "backgroundColor": "transparent",
                    "borderWidth": 0,
                  },
                  Object {
                    "color": "#737373",
                    "height": 12,
                    "opacity": 0,
                    "width": 12,
                  },
                  Object {
                    "flex": 0,
                    "height": 12,
                    "width": 12,
                  },
                ]
              }
              tintColor={4285756275}
              vbHeight={24}
              vbWidth={24}
            >
              <RNSVGGroup
                opacity={0}
                propList={
                  Array [
                    "stroke",
                  ]
                }
                stroke={null}
              >
                <RNSVGGroup>
                  <RNSVGPath
                    d="M0 12C-2.34822e-08 13.5759 0.310389 15.1363 0.913445 16.5922C1.5165 18.0481 2.40042 19.371 3.51472 20.4853C4.62902 21.5996 5.95189 22.4835 7.4078 23.0866C8.86371 23.6896 10.4241 24 12 24C13.5759 24 15.1363 23.6896 16.5922 23.0866C18.0481 22.4835 19.371 21.5996 20.4853 20.4853C21.5996 19.371 22.4835 18.0481 23.0866 16.5922C23.6896 15.1363 24 13.5759 24 12C24 10.4241 23.6896 8.86371 23.0866 7.4078C22.4835 5.95189 21.5996 4.62902 20.4853 3.51472C19.371 2.40042 18.0481 1.5165 16.5922 0.913446C15.1363 0.310389 13.5759 0 12 0C10.4241 0 8.86371 0.310389 7.4078 0.913446C5.95189 1.5165 4.62902 2.40042 3.51472 3.51472C2.40042 4.62902 1.5165 5.95189 0.913445 7.4078C0.310389 8.86371 -2.34822e-08 10.4241 0 12Z"
                    fill={
                      Array [
                        2,
                      ]
                    }
                    propList={
                      Array [
                        "fill",
                        "stroke",
                      ]
                    }
                    stroke={null}
                  />
                </RNSVGGroup>
              </RNSVGGroup>
            </RNSVGSvgView>
          </View>
        </View>
        <View
          dataSet={Object {}}
          style={
            Object {
              "width": 8,
            }
          }
        />
        <Text
          dataSet={Object {}}
          style={
            Object {
              "backgroundColor": undefined,
              "color": "#171717",
              "fontFamily": undefined,
              "fontSize": 16,
              "fontStyle": "normal",
              "fontWeight": "400",
              "letterSpacing": 0,
              "lineHeight": 24,
              "textDecorationLine": undefined,
            }
          }
        >
          No
        </Text>
      </View>
    </View>
  </View>
</View>
`;

exports[`<FormControlRadio> should display initial value 1`] = `
<View
  dataSet={Object {}}
  isInvalid={false}
  placeholder="civic-incubator-details.title"
  style={
    Object {
      "width": "100%",
    }
  }
>
  <View
    dataSet={Object {}}
    feedbackId="field-8-feedback"
    hasFeedbackText={true}
    hasHelpText={false}
    helpTextId="field-8-helptext"
    isDisabled={false}
    isInvalid={false}
    isReadOnly={false}
    isRequired={false}
    labelId="field-8-label"
    nativeID="field-8-label"
    setHasFeedbackText={[Function]}
    setHasHelpText={[Function]}
    style={
      Object {
        "flexDirection": "row",
        "justifyContent": "flex-start",
        "marginBottom": 4,
        "marginTop": 4,
      }
    }
  >
    <Text
      dataSet={Object {}}
      style={
        Object {
          "backgroundColor": undefined,
          "color": "#737373",
          "fontFamily": undefined,
          "fontSize": 14,
          "fontStyle": "normal",
          "fontWeight": "500",
          "letterSpacing": 0,
          "lineHeight": 21,
          "textDecorationLine": undefined,
        }
      }
    >
      Delete civic incubator item
    </Text>
  </View>
  <View
    accessibilityLabel="Delete civic incubator item"
    accessibilityRole="radiogroup"
    accessibilityState={
      Object {
        "disabled": false,
      }
    }
    dataSet={Object {}}
    name="item"
    onChange={[Function]}
    style={
      Object {
        "alignItems": "flex-start",
      }
    }
    value="2"
  >
    <View
      accessibilityRole="radio"
      accessibilityState={
        Object {
          "checked": false,
          "disabled": false,
        }
      }
      accessible={true}
      checked={false}
      collapsable={false}
      dataSet={Object {}}
      feedbackId="field-7-feedback"
      focusable={true}
      formControlContext={
        Object {
          "feedbackId": "field-7-feedback",
          "hasFeedbackText": false,
          "hasHelpText": false,
          "helpTextId": "field-7-helptext",
          "isDisabled": false,
          "isInvalid": false,
          "isReadOnly": false,
          "isRequired": false,
          "labelId": "field-7-label",
          "nativeID": "field-7",
          "setHasFeedbackText": [Function],
          "setHasHelpText": [Function],
        }
      }
      hasFeedbackText={false}
      hasHelpText={false}
      helpTextId="field-7-helptext"
      isInvalid={false}
      isReadOnly={false}
      isRequired={false}
      labelId="field-7-label"
      nativeID="field-7"
      onBlur={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      setHasFeedbackText={[Function]}
      setHasHelpText={[Function]}
      state={
        Object {
          "lastFocusedValue": null,
          "name": "item",
          "selectedValue": "2",
          "setLastFocusedValue": [Function],
          "setSelectedValue": [Function],
        }
      }
      style={Object {}}
      value="1"
    >
      <View
        dataSet={Object {}}
        style={
          Object {
            "alignItems": "center",
            "flexDirection": "row",
          }
        }
      >
        <View
          dataSet={Object {}}
          style={
            Object {
              "alignItems": "center",
              "display": "flex",
              "justifyContent": "center",
            }
          }
        >
          <View
            dataSet={Object {}}
            style={Object {}}
          />
          <View
            colorScheme="primary"
            dataSet={Object {}}
            defaultIsChecked={false}
            feedbackId="field-8-feedback"
            formControlContext={
              Object {
                "feedbackId": "field-8-feedback",
                "hasFeedbackText": true,
                "hasHelpText": false,
                "helpTextId": "field-8-helptext",
                "isDisabled": false,
                "isInvalid": false,
                "isReadOnly": false,
                "isRequired": false,
                "labelId": "field-8-label",
                "nativeID": "field-8",
                "setHasFeedbackText": [Function],
                "setHasHelpText": [Function],
              }
            }
            hasFeedbackText={true}
            hasHelpText={false}
            helpTextId="field-8-helptext"
            isDisabled={false}
            isInvalid={false}
            isReadOnly={false}
            isRequired={false}
            labelId="field-8-label"
            nativeID="field-8"
            setHasFeedbackText={[Function]}
            setHasHelpText={[Function]}
            state={
              Object {
                "lastFocusedValue": null,
                "name": "item",
                "selectedValue": "2",
                "setLastFocusedValue": [Function],
                "setSelectedValue": [Function],
              }
            }
            style={
              Object {
                "alignItems": "center",
                "backgroundColor": "#fafafa",
                "borderColor": "#a3a3a3",
                "borderRadius": 9999,
                "borderWidth": 2,
                "display": "flex",
                "justifyContent": "center",
                "paddingBottom": 4,
                "paddingLeft": 4,
                "paddingRight": 4,
                "paddingTop": 4,
              }
            }
            value="1"
          >
            <RNSVGSvgView
              accessibilityRole="image"
              align="xMidYMid"
              bbHeight={12}
              bbWidth={12}
              color={4285756275}
              dataSet={Object {}}
              focusable={false}
              meetOrSlice={0}
              minX={0}
              minY={0}
              stroke=""
              style={
                Array [
                  Object {
                    "backgroundColor": "transparent",
                    "borderWidth": 0,
                  },
                  Object {
                    "color": "#737373",
                    "height": 12,
                    "opacity": 0,
                    "width": 12,
                  },
                  Object {
                    "flex": 0,
                    "height": 12,
                    "width": 12,
                  },
                ]
              }
              tintColor={4285756275}
              vbHeight={24}
              vbWidth={24}
            >
              <RNSVGGroup
                opacity={0}
                propList={
                  Array [
                    "stroke",
                  ]
                }
                stroke={null}
              >
                <RNSVGGroup>
                  <RNSVGPath
                    d="M0 12C-2.34822e-08 13.5759 0.310389 15.1363 0.913445 16.5922C1.5165 18.0481 2.40042 19.371 3.51472 20.4853C4.62902 21.5996 5.95189 22.4835 7.4078 23.0866C8.86371 23.6896 10.4241 24 12 24C13.5759 24 15.1363 23.6896 16.5922 23.0866C18.0481 22.4835 19.371 21.5996 20.4853 20.4853C21.5996 19.371 22.4835 18.0481 23.0866 16.5922C23.6896 15.1363 24 13.5759 24 12C24 10.4241 23.6896 8.86371 23.0866 7.4078C22.4835 5.95189 21.5996 4.62902 20.4853 3.51472C19.371 2.40042 18.0481 1.5165 16.5922 0.913446C15.1363 0.310389 13.5759 0 12 0C10.4241 0 8.86371 0.310389 7.4078 0.913446C5.95189 1.5165 4.62902 2.40042 3.51472 3.51472C2.40042 4.62902 1.5165 5.95189 0.913445 7.4078C0.310389 8.86371 -2.34822e-08 10.4241 0 12Z"
                    fill={
                      Array [
                        2,
                      ]
                    }
                    propList={
                      Array [
                        "fill",
                        "stroke",
                      ]
                    }
                    stroke={null}
                  />
                </RNSVGGroup>
              </RNSVGGroup>
            </RNSVGSvgView>
          </View>
        </View>
        <View
          dataSet={Object {}}
          style={
            Object {
              "width": 8,
            }
          }
        />
        <Text
          dataSet={Object {}}
          style={
            Object {
              "backgroundColor": undefined,
              "color": "#171717",
              "fontFamily": undefined,
              "fontSize": 16,
              "fontStyle": "normal",
              "fontWeight": "400",
              "letterSpacing": 0,
              "lineHeight": 24,
              "textDecorationLine": undefined,
            }
          }
        >
          Yes
        </Text>
      </View>
    </View>
    <View
      dataSet={Object {}}
      style={
        Object {
          "height": 4,
        }
      }
    />
    <View
      accessibilityRole="radio"
      accessibilityState={
        Object {
          "checked": true,
          "disabled": false,
        }
      }
      accessible={true}
      checked={true}
      collapsable={false}
      dataSet={Object {}}
      feedbackId="field-7-feedback"
      focusable={true}
      formControlContext={
        Object {
          "feedbackId": "field-7-feedback",
          "hasFeedbackText": false,
          "hasHelpText": false,
          "helpTextId": "field-7-helptext",
          "isDisabled": false,
          "isInvalid": false,
          "isReadOnly": false,
          "isRequired": false,
          "labelId": "field-7-label",
          "nativeID": "field-7",
          "setHasFeedbackText": [Function],
          "setHasHelpText": [Function],
        }
      }
      hasFeedbackText={false}
      hasHelpText={false}
      helpTextId="field-7-helptext"
      isInvalid={false}
      isReadOnly={false}
      isRequired={false}
      labelId="field-7-label"
      nativeID="field-7"
      onBlur={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      setHasFeedbackText={[Function]}
      setHasHelpText={[Function]}
      state={
        Object {
          "lastFocusedValue": null,
          "name": "item",
          "selectedValue": "2",
          "setLastFocusedValue": [Function],
          "setSelectedValue": [Function],
        }
      }
      style={Object {}}
      value="2"
    >
      <View
        dataSet={Object {}}
        style={
          Object {
            "alignItems": "center",
            "flexDirection": "row",
          }
        }
      >
        <View
          dataSet={Object {}}
          style={
            Object {
              "alignItems": "center",
              "display": "flex",
              "justifyContent": "center",
            }
          }
        >
          <View
            dataSet={Object {}}
            style={Object {}}
          />
          <View
            colorScheme="primary"
            dataSet={Object {}}
            defaultIsChecked={false}
            feedbackId="field-8-feedback"
            formControlContext={
              Object {
                "feedbackId": "field-8-feedback",
                "hasFeedbackText": true,
                "hasHelpText": false,
                "helpTextId": "field-8-helptext",
                "isDisabled": false,
                "isInvalid": false,
                "isReadOnly": false,
                "isRequired": false,
                "labelId": "field-8-label",
                "nativeID": "field-8",
                "setHasFeedbackText": [Function],
                "setHasHelpText": [Function],
              }
            }
            hasFeedbackText={true}
            hasHelpText={false}
            helpTextId="field-8-helptext"
            isDisabled={false}
            isInvalid={false}
            isReadOnly={false}
            isRequired={false}
            labelId="field-8-label"
            nativeID="field-8"
            setHasFeedbackText={[Function]}
            setHasHelpText={[Function]}
            state={
              Object {
                "lastFocusedValue": null,
                "name": "item",
                "selectedValue": "2",
                "setLastFocusedValue": [Function],
                "setSelectedValue": [Function],
              }
            }
            style={
              Object {
                "alignItems": "center",
                "backgroundColor": "#fafafa",
                "borderColor": "#d37b16",
                "borderRadius": 9999,
                "borderWidth": 2,
                "display": "flex",
                "justifyContent": "center",
                "paddingBottom": 4,
                "paddingLeft": 4,
                "paddingRight": 4,
                "paddingTop": 4,
              }
            }
            value="2"
          >
            <RNSVGSvgView
              accessibilityRole="image"
              align="xMidYMid"
              bbHeight={12}
              bbWidth={12}
              color={4292049686}
              dataSet={Object {}}
              focusable={false}
              meetOrSlice={0}
              minX={0}
              minY={0}
              stroke=""
              style={
                Array [
                  Object {
                    "backgroundColor": "transparent",
                    "borderWidth": 0,
                  },
                  Object {
                    "color": "#d37b16",
                    "height": 12,
                    "opacity": 1,
                    "width": 12,
                  },
                  Object {
                    "flex": 0,
                    "height": 12,
                    "width": 12,
                  },
                ]
              }
              tintColor={4292049686}
              vbHeight={24}
              vbWidth={24}
            >
              <RNSVGGroup
                opacity={1}
                propList={
                  Array [
                    "stroke",
                  ]
                }
                stroke={null}
              >
                <RNSVGGroup>
                  <RNSVGPath
                    d="M0 12C-2.34822e-08 13.5759 0.310389 15.1363 0.913445 16.5922C1.5165 18.0481 2.40042 19.371 3.51472 20.4853C4.62902 21.5996 5.95189 22.4835 7.4078 23.0866C8.86371 23.6896 10.4241 24 12 24C13.5759 24 15.1363 23.6896 16.5922 23.0866C18.0481 22.4835 19.371 21.5996 20.4853 20.4853C21.5996 19.371 22.4835 18.0481 23.0866 16.5922C23.6896 15.1363 24 13.5759 24 12C24 10.4241 23.6896 8.86371 23.0866 7.4078C22.4835 5.95189 21.5996 4.62902 20.4853 3.51472C19.371 2.40042 18.0481 1.5165 16.5922 0.913446C15.1363 0.310389 13.5759 0 12 0C10.4241 0 8.86371 0.310389 7.4078 0.913446C5.95189 1.5165 4.62902 2.40042 3.51472 3.51472C2.40042 4.62902 1.5165 5.95189 0.913445 7.4078C0.310389 8.86371 -2.34822e-08 10.4241 0 12Z"
                    fill={
                      Array [
                        2,
                      ]
                    }
                    propList={
                      Array [
                        "fill",
                        "stroke",
                      ]
                    }
                    stroke={null}
                  />
                </RNSVGGroup>
              </RNSVGGroup>
            </RNSVGSvgView>
          </View>
        </View>
        <View
          dataSet={Object {}}
          style={
            Object {
              "width": 8,
            }
          }
        />
        <Text
          dataSet={Object {}}
          style={
            Object {
              "backgroundColor": undefined,
              "color": "#171717",
              "fontFamily": undefined,
              "fontSize": 16,
              "fontStyle": "normal",
              "fontWeight": "400",
              "letterSpacing": 0,
              "lineHeight": 24,
              "textDecorationLine": undefined,
            }
          }
        >
          No
        </Text>
      </View>
    </View>
  </View>
</View>
`;

exports[`<FormControlRadio> should update value 1`] = `
<View
  dataSet={Object {}}
  isInvalid={false}
  placeholder="civic-incubator-details.title"
  style={
    Object {
      "width": "100%",
    }
  }
  testID="radio-item"
>
  <View
    dataSet={Object {}}
    feedbackId="field-11-feedback"
    hasFeedbackText={true}
    hasHelpText={false}
    helpTextId="field-11-helptext"
    isDisabled={false}
    isInvalid={false}
    isReadOnly={false}
    isRequired={false}
    labelId="field-11-label"
    nativeID="field-11-label"
    setHasFeedbackText={[Function]}
    setHasHelpText={[Function]}
    style={
      Object {
        "flexDirection": "row",
        "justifyContent": "flex-start",
        "marginBottom": 4,
        "marginTop": 4,
      }
    }
  >
    <Text
      dataSet={Object {}}
      style={
        Object {
          "backgroundColor": undefined,
          "color": "#737373",
          "fontFamily": undefined,
          "fontSize": 14,
          "fontStyle": "normal",
          "fontWeight": "500",
          "letterSpacing": 0,
          "lineHeight": 21,
          "textDecorationLine": undefined,
        }
      }
    >
      Delete civic incubator item
    </Text>
  </View>
  <View
    accessibilityLabel="Delete civic incubator item"
    accessibilityRole="radiogroup"
    accessibilityState={
      Object {
        "disabled": false,
      }
    }
    dataSet={Object {}}
    name="select"
    onChange={[Function]}
    style={
      Object {
        "alignItems": "flex-start",
      }
    }
  >
    <View
      accessibilityRole="radio"
      accessibilityState={
        Object {
          "checked": true,
          "disabled": false,
        }
      }
      accessible={true}
      checked={true}
      collapsable={false}
      dataSet={Object {}}
      feedbackId="field-11-feedback"
      focusable={true}
      formControlContext={
        Object {
          "feedbackId": "field-11-feedback",
          "hasFeedbackText": true,
          "hasHelpText": false,
          "helpTextId": "field-11-helptext",
          "isDisabled": false,
          "isInvalid": false,
          "isReadOnly": false,
          "isRequired": false,
          "labelId": "field-11-label",
          "nativeID": "field-11",
          "setHasFeedbackText": [Function],
          "setHasHelpText": [Function],
        }
      }
      hasFeedbackText={true}
      hasHelpText={false}
      helpTextId="field-11-helptext"
      isInvalid={false}
      isReadOnly={false}
      isRequired={false}
      labelId="field-11-label"
      nativeID="field-11"
      onBlur={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      setHasFeedbackText={[Function]}
      setHasHelpText={[Function]}
      state={
        Object {
          "lastFocusedValue": null,
          "name": "select",
          "selectedValue": "1",
          "setLastFocusedValue": [Function],
          "setSelectedValue": [Function],
        }
      }
      style={Object {}}
      value="1"
    >
      <View
        dataSet={Object {}}
        style={
          Object {
            "alignItems": "center",
            "flexDirection": "row",
          }
        }
      >
        <View
          dataSet={Object {}}
          style={
            Object {
              "alignItems": "center",
              "display": "flex",
              "justifyContent": "center",
            }
          }
        >
          <View
            dataSet={Object {}}
            style={Object {}}
          />
          <View
            colorScheme="primary"
            dataSet={Object {}}
            defaultIsChecked={false}
            feedbackId="field-11-feedback"
            formControlContext={
              Object {
                "feedbackId": "field-11-feedback",
                "hasFeedbackText": true,
                "hasHelpText": false,
                "helpTextId": "field-11-helptext",
                "isDisabled": false,
                "isInvalid": false,
                "isReadOnly": false,
                "isRequired": false,
                "labelId": "field-11-label",
                "nativeID": "field-11",
                "setHasFeedbackText": [Function],
                "setHasHelpText": [Function],
              }
            }
            hasFeedbackText={true}
            hasHelpText={false}
            helpTextId="field-11-helptext"
            isDisabled={false}
            isInvalid={false}
            isReadOnly={false}
            isRequired={false}
            labelId="field-11-label"
            nativeID="field-11"
            setHasFeedbackText={[Function]}
            setHasHelpText={[Function]}
            state={
              Object {
                "lastFocusedValue": null,
                "name": "select",
                "selectedValue": "1",
                "setLastFocusedValue": [Function],
                "setSelectedValue": [Function],
              }
            }
            style={
              Object {
                "alignItems": "center",
                "backgroundColor": "#fafafa",
                "borderColor": "#d37b16",
                "borderRadius": 9999,
                "borderWidth": 2,
                "display": "flex",
                "justifyContent": "center",
                "paddingBottom": 4,
                "paddingLeft": 4,
                "paddingRight": 4,
                "paddingTop": 4,
              }
            }
            value="1"
          >
            <RNSVGSvgView
              accessibilityRole="image"
              align="xMidYMid"
              bbHeight={12}
              bbWidth={12}
              color={4292049686}
              dataSet={Object {}}
              focusable={false}
              meetOrSlice={0}
              minX={0}
              minY={0}
              stroke=""
              style={
                Array [
                  Object {
                    "backgroundColor": "transparent",
                    "borderWidth": 0,
                  },
                  Object {
                    "color": "#d37b16",
                    "height": 12,
                    "opacity": 1,
                    "width": 12,
                  },
                  Object {
                    "flex": 0,
                    "height": 12,
                    "width": 12,
                  },
                ]
              }
              tintColor={4292049686}
              vbHeight={24}
              vbWidth={24}
            >
              <RNSVGGroup
                opacity={1}
                propList={
                  Array [
                    "stroke",
                  ]
                }
                stroke={null}
              >
                <RNSVGGroup>
                  <RNSVGPath
                    d="M0 12C-2.34822e-08 13.5759 0.310389 15.1363 0.913445 16.5922C1.5165 18.0481 2.40042 19.371 3.51472 20.4853C4.62902 21.5996 5.95189 22.4835 7.4078 23.0866C8.86371 23.6896 10.4241 24 12 24C13.5759 24 15.1363 23.6896 16.5922 23.0866C18.0481 22.4835 19.371 21.5996 20.4853 20.4853C21.5996 19.371 22.4835 18.0481 23.0866 16.5922C23.6896 15.1363 24 13.5759 24 12C24 10.4241 23.6896 8.86371 23.0866 7.4078C22.4835 5.95189 21.5996 4.62902 20.4853 3.51472C19.371 2.40042 18.0481 1.5165 16.5922 0.913446C15.1363 0.310389 13.5759 0 12 0C10.4241 0 8.86371 0.310389 7.4078 0.913446C5.95189 1.5165 4.62902 2.40042 3.51472 3.51472C2.40042 4.62902 1.5165 5.95189 0.913445 7.4078C0.310389 8.86371 -2.34822e-08 10.4241 0 12Z"
                    fill={
                      Array [
                        2,
                      ]
                    }
                    propList={
                      Array [
                        "fill",
                        "stroke",
                      ]
                    }
                    stroke={null}
                  />
                </RNSVGGroup>
              </RNSVGGroup>
            </RNSVGSvgView>
          </View>
        </View>
        <View
          dataSet={Object {}}
          style={
            Object {
              "width": 8,
            }
          }
        />
        <Text
          dataSet={Object {}}
          style={
            Object {
              "backgroundColor": undefined,
              "color": "#171717",
              "fontFamily": undefined,
              "fontSize": 16,
              "fontStyle": "normal",
              "fontWeight": "400",
              "letterSpacing": 0,
              "lineHeight": 24,
              "textDecorationLine": undefined,
            }
          }
        >
          Yes
        </Text>
      </View>
    </View>
    <View
      dataSet={Object {}}
      style={
        Object {
          "height": 4,
        }
      }
    />
    <View
      accessibilityRole="radio"
      accessibilityState={
        Object {
          "checked": false,
          "disabled": false,
        }
      }
      accessible={true}
      checked={false}
      collapsable={false}
      dataSet={Object {}}
      feedbackId="field-10-feedback"
      focusable={true}
      formControlContext={
        Object {
          "feedbackId": "field-10-feedback",
          "hasFeedbackText": false,
          "hasHelpText": false,
          "helpTextId": "field-10-helptext",
          "isDisabled": false,
          "isInvalid": false,
          "isReadOnly": false,
          "isRequired": false,
          "labelId": "field-10-label",
          "nativeID": "field-10",
          "setHasFeedbackText": [Function],
          "setHasHelpText": [Function],
        }
      }
      hasFeedbackText={false}
      hasHelpText={false}
      helpTextId="field-10-helptext"
      isInvalid={false}
      isReadOnly={false}
      isRequired={false}
      labelId="field-10-label"
      nativeID="field-10"
      onBlur={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      setHasFeedbackText={[Function]}
      setHasHelpText={[Function]}
      state={
        Object {
          "lastFocusedValue": null,
          "name": "select",
          "selectedValue": undefined,
          "setLastFocusedValue": [Function],
          "setSelectedValue": [Function],
        }
      }
      style={Object {}}
      value="2"
    >
      <View
        dataSet={Object {}}
        style={
          Object {
            "alignItems": "center",
            "flexDirection": "row",
          }
        }
      >
        <View
          dataSet={Object {}}
          style={
            Object {
              "alignItems": "center",
              "display": "flex",
              "justifyContent": "center",
            }
          }
        >
          <View
            dataSet={Object {}}
            style={Object {}}
          />
          <View
            colorScheme="primary"
            dataSet={Object {}}
            defaultIsChecked={false}
            feedbackId="field-11-feedback"
            formControlContext={
              Object {
                "feedbackId": "field-11-feedback",
                "hasFeedbackText": true,
                "hasHelpText": false,
                "helpTextId": "field-11-helptext",
                "isDisabled": false,
                "isInvalid": false,
                "isReadOnly": false,
                "isRequired": false,
                "labelId": "field-11-label",
                "nativeID": "field-11",
                "setHasFeedbackText": [Function],
                "setHasHelpText": [Function],
              }
            }
            hasFeedbackText={true}
            hasHelpText={false}
            helpTextId="field-11-helptext"
            isDisabled={false}
            isInvalid={false}
            isReadOnly={false}
            isRequired={false}
            labelId="field-11-label"
            nativeID="field-11"
            setHasFeedbackText={[Function]}
            setHasHelpText={[Function]}
            state={
              Object {
                "lastFocusedValue": null,
                "name": "select",
                "selectedValue": "1",
                "setLastFocusedValue": [Function],
                "setSelectedValue": [Function],
              }
            }
            style={
              Object {
                "alignItems": "center",
                "backgroundColor": "#fafafa",
                "borderColor": "#a3a3a3",
                "borderRadius": 9999,
                "borderWidth": 2,
                "display": "flex",
                "justifyContent": "center",
                "paddingBottom": 4,
                "paddingLeft": 4,
                "paddingRight": 4,
                "paddingTop": 4,
              }
            }
            value="2"
          >
            <RNSVGSvgView
              accessibilityRole="image"
              align="xMidYMid"
              bbHeight={12}
              bbWidth={12}
              color={4285756275}
              dataSet={Object {}}
              focusable={false}
              meetOrSlice={0}
              minX={0}
              minY={0}
              stroke=""
              style={
                Array [
                  Object {
                    "backgroundColor": "transparent",
                    "borderWidth": 0,
                  },
                  Object {
                    "color": "#737373",
                    "height": 12,
                    "opacity": 0,
                    "width": 12,
                  },
                  Object {
                    "flex": 0,
                    "height": 12,
                    "width": 12,
                  },
                ]
              }
              tintColor={4285756275}
              vbHeight={24}
              vbWidth={24}
            >
              <RNSVGGroup
                opacity={0}
                propList={
                  Array [
                    "stroke",
                  ]
                }
                stroke={null}
              >
                <RNSVGGroup>
                  <RNSVGPath
                    d="M0 12C-2.34822e-08 13.5759 0.310389 15.1363 0.913445 16.5922C1.5165 18.0481 2.40042 19.371 3.51472 20.4853C4.62902 21.5996 5.95189 22.4835 7.4078 23.0866C8.86371 23.6896 10.4241 24 12 24C13.5759 24 15.1363 23.6896 16.5922 23.0866C18.0481 22.4835 19.371 21.5996 20.4853 20.4853C21.5996 19.371 22.4835 18.0481 23.0866 16.5922C23.6896 15.1363 24 13.5759 24 12C24 10.4241 23.6896 8.86371 23.0866 7.4078C22.4835 5.95189 21.5996 4.62902 20.4853 3.51472C19.371 2.40042 18.0481 1.5165 16.5922 0.913446C15.1363 0.310389 13.5759 0 12 0C10.4241 0 8.86371 0.310389 7.4078 0.913446C5.95189 1.5165 4.62902 2.40042 3.51472 3.51472C2.40042 4.62902 1.5165 5.95189 0.913445 7.4078C0.310389 8.86371 -2.34822e-08 10.4241 0 12Z"
                    fill={
                      Array [
                        2,
                      ]
                    }
                    propList={
                      Array [
                        "fill",
                        "stroke",
                      ]
                    }
                    stroke={null}
                  />
                </RNSVGGroup>
              </RNSVGGroup>
            </RNSVGSvgView>
          </View>
        </View>
        <View
          dataSet={Object {}}
          style={
            Object {
              "width": 8,
            }
          }
        />
        <Text
          dataSet={Object {}}
          style={
            Object {
              "backgroundColor": undefined,
              "color": "#171717",
              "fontFamily": undefined,
              "fontSize": 16,
              "fontStyle": "normal",
              "fontWeight": "400",
              "letterSpacing": 0,
              "lineHeight": 24,
              "textDecorationLine": undefined,
            }
          }
        >
          No
        </Text>
      </View>
    </View>
  </View>
</View>
`;
